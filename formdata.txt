Future<void> uploadFile(String filePath, String url, Map<String, String> additionalData) async {
  var uri = Uri.parse(url);
  var request = http.MultipartRequest('POST', uri);

  // Add additional form fields (text data)
  additionalData.forEach((key, value) {
    request.fields[key] = value;
  });

  // Add file
  var file = await http.MultipartFile.fromPath(
    'file', // field name in the request
    filePath,
    contentType: MediaType('image', 'jpeg'), // Adjust the content type based on your file
  );
  
  request.files.add(file);

  // Send the request
  var response = await request.send();

  if (response.statusCode == 200) {
    print('File uploaded successfully!');
  } else {
    print('Failed to upload file. Status: ${response.statusCode}');
  }
}







void main() async {
  String filePath = '/path/to/your/file.jpg';
  String uploadUrl = 'https://yourserver.com/upload';
  Map<String, String> data = {
    'username': 'exampleUser',
    'email': 'example@example.com',
  };

  await uploadFile(filePath, uploadUrl, data);
}



dependencies:
  flutter:
    sdk: flutter
  http: ^0.14.0
  path_provider: ^2.0.10


https://dev.to/carminezacc/advanced-flutter-networking-part-1-uploading-a-file-to-a-rest-api-from-flutter-using-a-multi-part-form-data-post-request-2ekm




















































import 'package:flutter/material.dart';
import 'package:ki_kati/components/post_component.dart';
import 'package:ki_kati/components/http_servive.dart';

class FeedScreen extends StatefulWidget {
  const FeedScreen({super.key});

  @override
  State<FeedScreen> createState() => _FeedScreenState();
}

class _FeedScreenState extends State<FeedScreen> {
  final HttpService httpService = HttpService("https://ki-kati.com/api/posts");
  bool _isLoading = false;
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _contentController = TextEditingController();
  final TextEditingController _imageUrlController = TextEditingController();

  void _resetFields() {
    setState(() {
      _titleController.text = "";
      _contentController.text = "";
      _imageUrlController.text = "";
    });
  }

  List<Map<String, dynamic>> availablePosts = [];

  Future<void> getPosts() async {
    try {
      // Call the get API
      setState(() {
        _isLoading = true;
      });
      final response = await httpService.get('/');
      print(response);
      // Assuming response is a list of posts from the API
      final List<dynamic> data = List.from(response);

      // Create a list of Post objects by manually mapping the API response
      List<Post> loadedPosts = data.map((postData) {
        return Post(
          id: postData['_id'].toString(),
          userId: postData['author']['_id'],
          username: postData['author']['username'],
          userThumbnailUrl: postData['author']['profileImage'] ?? '',
          text: postData['content'],
          imageUrl: postData['media'].isNotEmpty ? postData['media'][0] : null,
          timestamp: DateTime.parse(postData['createdAt']),
          likes: 0,
          comments: List<String>.from(postData['comments'] ?? []),
        );
      }).toList();

      // Update state with the fetched posts
      setState(() {
        availablePosts = loadedPosts.cast<Map<String, dynamic>>();
      });
      
    } catch (e) {
      setState(() {
        availablePosts = [];
      });
      // ignore: use_build_context_synchronously
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to load friends')),
      );
    } finally {
      setState(() {
        _isLoading = false; // Stop loading
      });
    }
  }

  List<Post> posts = [
    Post(
      id: '1',
      userId: 'u1',
      username: 'engdave',
      userThumbnailUrl:
          'https://cdn-icons-png.flaticon.com/512/9131/9131529.png',
      text:
          "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. I",
      imageUrl:
          'https://cdn.pixabay.com/photo/2017/12/08/11/53/event-party-3005668_1280.jpg',
      timestamp: DateTime.now().subtract(const Duration(minutes: 5)),
    )
  ];

  void _likePost(String postId) {
    setState(() {
      final post = posts.firstWhere((post) => post.id == postId);
      post.toggleLike();
    });
  }

  void _addComment(String postId, String comment) {
    setState(() {
      final post = posts.firstWhere((post) => post.id == postId);
      post.addComment(comment);
    });
  }

  void _addPost() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final response = await httpService.post('/create', {
        'content': _contentController.text,
        'title': _titleController.text,
      });
      print(response);
      if (response['statusCode'] == 201) {
        // success
        setState(() {
          _isLoading = false; // Set loading to false
          // Reset the input fields
        });
      }
    } catch (e) {
      print('Error: $e'); // Handle errors here\
    } finally {
      _resetFields();
      setState(() {
        _isLoading = false; // Set loading to false
      });
      // Close the Bottom Sheet
      Navigator.of(context).pop();
    }

    /*
    // Add post to the list of posts
    final newPost = Post(
      id: DateTime.now().toString(),
      userId: 'u3', // Assuming a new user
      username: 'New User', // Username for the new user
      userThumbnailUrl:
          'https://cdn-icons-png.flaticon.com/512/9131/9131529.png',
      text: _contentController.text,
      imageUrl:
          _imageUrlController.text.isNotEmpty ? _imageUrlController.text : null,
      timestamp: DateTime.now(),
    );

    setState(() {
      posts.add(newPost);
    });
    */
  }

  // Function to show the Bottom Sheet and add a post
  void _showAddPostBottomSheet() {
    /*
    final TextEditingController _titleController = TextEditingController();
    final TextEditingController _contentController = TextEditingController();
    final TextEditingController _imageUrlController = TextEditingController();
    */
    showModalBottomSheet(
      context: context,
      isScrollControlled: true, // To make the height configurable
      isDismissible: false,
      builder: (context) {
        return Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Add New Post',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                textAlign: TextAlign.start,
              ),
              const SizedBox(height: 20),

              // Title input
              TextField(
                controller: _titleController,
                decoration: const InputDecoration(
                  labelText: 'Post Title',
                ),
                style: const TextStyle(fontSize: 14),
              ),
              const SizedBox(height: 10),

              // Content input
              TextField(
                controller: _contentController,
                decoration: const InputDecoration(
                  labelText: 'Post Content',
                ),
                style: const TextStyle(fontSize: 14),
                maxLines: 4,
              ),
              const SizedBox(height: 10),

              // Image URL input (optional)
              TextField(
                controller: _imageUrlController,
                decoration: const InputDecoration(
                  labelText: 'Image URL (Optional)',
                ),
                style: const TextStyle(fontSize: 14),
              ),
              const SizedBox(height: 20),

              // Submit and cancel buttons
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(
                          vertical: 20, horizontal: 40),
                      backgroundColor: Colors.blue, // Set the background color
                      foregroundColor:
                          Colors.white, // Set the text color (foreground color)
                    ),
                    onPressed: _addPost,
                    child: const Text('Create Post'),
                  ),
                  TextButton(
                    onPressed: () {
                      // Close the Bottom Sheet without doing anything
                      Navigator.of(context).pop();
                    },
                    child: const Text('Cancel'),
                  ),
                ],
              ),
              const SizedBox(
                height: 20,
              )
            ],
          ),
        );
      },
    );
  }

  @override
  void initState() {
    super.initState();
    getPosts();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        foregroundColor: Colors.white,
        backgroundColor: Colors.black,
        title: const Text(
          'Posts Feed',
          style: TextStyle(fontSize: 16),
        ),
        actions: [
          // Using CircleAvatar for the circular button with a red background and white icon
          Padding(
            padding: const EdgeInsets.only(right: 16.0),
            child: CircleAvatar(
              radius: 20, // Size of the circle
              backgroundColor: Colors.red, // Red background
              child: IconButton(
                icon: const Icon(Icons.add, color: Colors.white), // White icon
                onPressed: _showAddPostBottomSheet, // Show the bottom sheet
              ),
            ),
          ),
        ],
      ),
      body: ListView.builder(
        itemCount: posts.length,
        itemBuilder: (context, index) {
          return PostWidget(
            post: posts[index],
            onLike: _likePost,
            onComment: (comment) => _addComment(posts[index].id, comment),
          );
        },
      ),
    );
  }
}
